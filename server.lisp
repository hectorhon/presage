(in-package :com.hon.server)

(defun my-function ()
  (let ((socket (make-instance 'inet-socket :type :stream :protocol :tcp)))
    (setf (sockopt-reuse-address socket) t)
    (unwind-protect
         (progn (socket-bind socket (make-inet-address "127.0.0.1") 8080)
                (print "bound")
                (socket-listen socket 4)
                (print "listening")
                (multiple-value-bind (peer-socket peer-address) (socket-accept socket)
                  (print "accepted")
                  (unwind-protect
                       (let ((stream (socket-make-stream peer-socket :input t :timeout 5)))
                         (loop :with line = (read-line stream)
                            :do (print line)
                              (print "...")
                              (setf line (read-line stream))
                            :until (eq 1 (length line))))
                    (socket-shutdown peer-socket :direction :io)
                    (socket-close peer-socket))))
      (socket-shutdown socket :direction :io)
      (socket-close socket)
      (print "closed"))))
